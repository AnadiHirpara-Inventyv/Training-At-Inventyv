const http = require("http");
const url = require("url");
const fs = require("fs");



const server = http.createServer((req, res) => {
  // Parse the URL
  const parsedUrl = url.parse(req.url, true);
  const path = parsedUrl.pathname;

  function server_error(res) {
    res.writeHead(500, { "Content-Type": "application/json" });
    res.end(JSON.stringify({ error: "Internal Server Error" }));
  }

  function pageNotFound(res) {
    res.writeHead(404, { "Content-Type": "application/json" });
    res.end(JSON.stringify({ error: "Not Found" }));
  }

  // Set CORS headers to allow requests from any origin
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader(
    "Access-Control-Allow-Methods",
    "GET, POST, PUT, PATCH, DELETE"
  );
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");

  // Route based on the HTTP method
  switch (req.method) {

    case "GET":
      // Read operation
      if (path === "/productsa" && req.method === "GET") {
        // Read your JSON file and send its contents
        fs.readFile("data.json", "utf8", (err, data) => {
          if (err) {
            server_error(res);
          } else {
            console.log("check get");
            res.writeHead(200, { "Content-Type": "application/json" });
            res.write(data);
            res.end();
          }
        });
      } else {
        // Handle other routes
        pageNotFound(res);
      }
      break;

    case "POST":

      if (path === "/products" && req.method === "POST") {
      console.log("n")
        let body = "";
        req.on("data", (chunk) => {
          body += chunk;
        });

        req.on("end", () => {
          // Parse the JSON from the request body
          const newData = JSON.parse(body);

          // Write the new data to the JSON file
          fs.writeFile("data.json", JSON.stringify(newData), "utf8", (err) => {
            if (err) {
              res.writeHead(500, { "Content-Type": "application/json" });
              res.end(JSON.stringify({ error: "Internal Server Error" }));
            } else {
              res.writeHead(201, { "Content-Type": "application/json" });
              res.end(JSON.stringify(newData));
            }
          });
        });
      } else {
        // Handle other routes
        res.writeHead(404, { "Content-Type": "application/json" });
        res.end(JSON.stringify({ error: "Not Found" }));
      }
      break;


    default:
      res.writeHead(405, { "Content-Type": "application/json" });
      res.end(JSON.stringify({ error: "Method Not Allowed" }));
  }
});

const port = 3000;
server.listen(port, () => {
  console.log(`Server is listening on port ${port}`);
});
